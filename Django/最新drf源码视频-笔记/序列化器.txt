序列化器
	- 序列化，从数据库获取QuerySet或数据对象 -> JSON
		- 序列化器的类
		- 路由 -> 视图 -> 去数据库获取对象或QuerySet -> 序列化器的类转换成列表、字典、有序字典 -> JSON处理
	- 序列化-源码流程

	- 数据校验
		- 序列化器的类
		- 路由 -> 视图 -> request.data -> 校验（序列化器的类）-> 操作（db，序列化器的类）
	- 数据校验-源码流程

	- 序列化和数据校验结合

	1. 序列化
		数据库中任何表结构关系，获取到对象或者QuerySet时，就可以利用一下知识点转成JSON，再返回。
		1.1 Serializer
		单个对象：
		class DepartSerializer(serializers.Serializer):
		    title = serializers.CharField()
		    count = serializers.IntegerField()

		class DepartView(APIView):
		    def get(self, request, *args, **kwargs):
		        # 1. 数据库中获取数据
		        depart_object = Depart.objects.first()  # objects数据库管理器？类方法有哪些？如何进行源码解析？

		        # 2. 转换JSON格式
		        ser = DepartSerializer(instance=depart_object)	# 实例化对象，类可以创造无数的对象，对象有自己的属性和方法，类方法来实现具体的逻辑细节，面向对象编程，一切皆对象int\str\list\tuple\set

		        # 3. 返回给用户
		        return Response(ser.data)	# ser.data调用类方法data()

		多个对象QuerySet：
		class DepartView(APIView):
		    def get(self, request, *args, **kwargs):
		        # 1. 数据库中获取数据
		        # QuerySet [obj, obj, obj]
		        depart_object = Depart.objects.all()

		        # 2. 转换JSON格式
		        ser = DepartSerializer(instance=depart_object, many=True)

		        # 3. 返回给用户
		        return Response(ser.data)

		1.2 ModelSerializer
		class DepartSerializer(serializers.ModelSerializer):
		    class Meta:
		        model = Depart
		        fields = "__all__"

		1.3 source - 自定义展示：choices、ForeignKey
		class UserSerializer(serializers.ModelSerializer):
		    gender = serializers.CharField(source="get_gender_display")	 # choices=((1, "男"), (2, "女"))
		    depart = serializers.CharField(source="depart.title")  # 外键，跨表查询

		    class Meta:
		        model = UserInfo
		        fields = "__all__"

		# source="get_gender_display" 实现原理
		for obj in queryset:
			obj.get_gender_display()
			obj.depart

		1.4 时间：(全局配置：REST_FRAMEWORK = {'DATETIME_FORMAT': "%Y-%m-%d %H:%M:%S"})
		ctime = serializers.DateTimeField(format="%Y-%m-%d")
		ctime = serializers.DateTimeField(format='%Y-%m-%d %H:%M:%S')

		1.5 自定义方法
		xxx = serializers.SerializerMethodField()
		choices
			def get_xxx(self, obj):
	        	return obj.get_gender_display()
		ForeignKey
			def get_xxx(self, obj):
	        	return obj.name
			for obj in queryset:
				get_xxx(obj)
		ManyToManyField
			def get_xxx(self, obj):
		        queryset = obj.tags.all() # [Tag对象, Tag对象, Tag对象]
		        result = [{"id": tag.id, "caption": tag.caption} for tag in queryset]
		        return result

		1.6 嵌套：针对fk、m2m
			class D1Serializer(serializers.ModelSerializer):
			    class Meta:
			        model = Depart
			        fields = "__all__"
			class T1Serializer(serializers.ModelSerializer):
			    class Meta:
			        model = Tag
			        fields = "__all__"
			class UserSerializer(serializers.ModelSerializer):
			    gender = serializers.CharField(source="get_gender_display")
			    ctime = serializers.DateTimeField(format='%Y-%m-%d %H:%M:%S')
			    depart = D1Serializer()
			    tags = T1Serializer(many=True)

			    class Meta:
			        model = UserInfo
			        fields = "__all__"

		1.7 继承
		class Base(serializers.Serializer):
    		xxx = serializers.CharField(source="name")
		class UserSerializer(serializers.ModelSerializer, Base):
		    class Meta:
		        model = UserInfo
		        fields = ["name", "age", "xxx"]

	2. 序列化-源码流程
		第一步：加载字段
		# 1.在类成员中删除
		# 2.汇总到 BBSerializer._declared_fields = {"yy": 对象}
		class BBSerializer(serializers.Serializer):
    		yy = serializers.CharField(source="name")
    		name = 123

    	# 1.在类成员中删除
		# 2.汇总到 BBSerializer._declared_fields = {"xx": 对象, "yy": 对象}
		class UserSerializer(serializers.ModelSerializer, Base):
		    xx = serializers.CharField(source="name")
		    class Meta:
		        model = UserInfo
		        fields = ["name", "age", "xxx"]

		第二步：序列化
		queryset = UserInfo.objects.all()
		ser = UserSerializer(instance=queryset, many=True) # ListSerializer对象
		db->queryset=[{id:xxx, name:xxx, age=xxx}, ...] -> 循环queryset中的每个对象，再调用UserSerializer对它进行实例化。

		instance = UserInfo.objects.all().first()
		ser = UserSerializer(instance=instance, many=False) # UserSerializer对象
		db->instance={id:xxx, name:xxx, age=xxx} => UserSerializer对象

		UserSerializer() # __new__  __init__
		======> 对象   ->  UserSerializer   ->序列化

		序列化过程：
			db_instance = Depart.objects.all().first()               instance.title order count  models.IntegerField(verbose_name="顺序")
			ser = UserSerializer(instance=db_instance, many=False)            title order count  serializers.CharField(source="name")

			ser.data 	# 触发
				- 内部寻找对应关系
				- 一一进行序列化


1.运行django项目，创建字段对象 
	# 类中的属性和方法先创建，然后当作参数传递到元类才创建Foo类
	Foo = MyType("foo", (), {"v1":123, "v2":456})

	class Foo(object, metaclass=MyType):
		v1 = 123
		v2 = 456

		def func(self):
			pass

	class InfoSerializer(serializers.Serializer):
		pass

	class XXX(Serializer):
		xx = serializers.CharField()

	class InfoSerializer(serializers.ModelSerializer, XXX):
		id = serializers.IntegerField() 	# {max_value:111,     _creation_counter:0}
		title = serializers.CharField() 	# {allow_blank:False, _creation_counter:1}
		order = serializers.IntegerField()  # {max_value:111,     _creation_counter:2}

		class Meta:
			model = UserInfo
			fields = "__all__"

2.创建类：（利用metaclass）
	# 当前序列化类中所有的字段对象（父类+自己）
	InfoSerializer._declared_fields

3.用户请求到来，数据库获取数据 + 序列化类
	instance = UserInfo.objects.all().first()
	ser = UserSerializer(instance=instance, many=False) # __new__ __init__  UserSerializer

	queryset = UserInfo.objects.all()
	ser = UserSerializer(instance=queryset, many=True)  # 实例化 ListSerializer( obj = UserSerializer() )

4.出发序列化-当前类 ser.data

5.触发序列化-ListSerializer ser.data
	ser.data => 循环 + 第4步基础上

数据校验，对用户请求数据格式校验
	1.自定义 Serializer + 字段
	2.自定义 Serializer + 字段（内置+正则）
	3.自定义 Serializer + 字段（内置+正则）+字段钩子 + 全局钩子
	4.自定义 Serializer + extra_kwargs + save（多，pop; 少，save参数）
	5.自定义 Serializer + FK  => 自动获取关联数据 depart  => depart_id
	6.自定义 Serializer + M2M => 自动获取关联数据 ListField或DictField + 钩子
	7.save返回值
		instance = ser.save()
	8.序列化返回
		- 校验Serializer +序列化Serializer
			def post(self, request, *args, **kwargs):
		        # 1.获取原始数据
		        # print(request.data)
		        # 2.校验
		        ser = UsSerializer(data=request.data)
		        if ser.is_valid():
		            instance = ser.save()
		            xx = UsSerializer(instance=instance)
		            return Response(xx.data)
		        else:
		            print(ser.errors)
		- 校验Serializer
			def post(self, request, *args, **kwargs):
		        # 1.获取原始数据
		        # print(request.data)
		        # 2.校验
		        ser = UsSerializer(data=request.data)
		        if ser.is_valid():
		            ser.save()
		            return Response(ser.data)
		        else:
		            print(ser.errors)
		- 校验Serializer
			- 校验，5个字段
			- 序列化，3个字段
			read_only=True		只有在序列化的时候使用
			write_only=True		只有在校验的时候使用
			extra_kwargs = {
            "id": {"read_only": True},
            "count": {"write_only": True},
        }

	1.内置和正则校验
		# 了解各参数的含义？？
		class Field:
			def __init__(self, *, read_only=False, write_only=False,
                 required=None, default=empty, initial=empty, source=None,
                 label=None, help_text=None, style=None,
                 error_messages=None, validators=None, allow_null=False):

		class DepartSSerializer(serializers.Serializer):
		    title = serializers.CharField(required=True, max_length=20, min_length=1) # required=True 表示该字段在添加或更新数据时不能为空；required=False表示数据可以为空，默认为True
		    order = serializers.IntegerField(required=False, max_value=100, min_value=10)
		    count = serializers.ChoiceField(choices=[('1', '高级'), (2, '中级')])
		    # email = serializers.EmailField()
		    email = serializers.CharField(validators=[RegexValidator(r"\d+", message="邮箱格式1错误"), RegexValidator(r"\w+", message="邮箱格式2错误")])

    2.钩子校验
    	def validate_code(self, value):
	        print(value)
	        if len(value) > 6:
	            raise exceptions.ValidationError("字段钩子校验失败")
	        return value

	    def validate(self, attrs):
	        print("validate=", attrs)
	        # api_settings.NON_FIELD_ERRORS_KEY 可以在全局中配置
	        # raise exceptions.ValidationError("全局钩子校验失败")
	        return attrs

	3.Model校验
		class RoleSerializer(serializers.ModelSerializer):
		    more = serializers.CharField(required=True)

		    class Meta:
		        model = models.Role
		        fields = ["title", "order", "more"]
		        # 有哪些约束形式：min_length、max_length、error_messages、？？
		        extra_kwargs = {
		            "title": {"validators": [RegexValidator(r"\d+", message="格式错误")]},
		            "order": {
				                'min_length': 3,
				                'max_length': 20,
				                'error_messages': {  # 自定义校验出错后的错误信息提示
				                    'min_length': '仅允许3-20个字符的用户',
				                    'max_length': '仅允许3-20个字符的用户',
				            },
		        }

		def post(self, request):
	        ser = RoleSerializer(data=request.data)
	        if ser.is_valid():
	        	# 字段多的情况，将额外的字段剔除
	            ser.validated_data.pop("more")
	            # 字段少的情况，保存额外的字段信息，如是谁创建的数据，request.user
	            instance = ser.save()  # ser.save(v1=123,v2=234)
	            print(instance)
	            return Response(ser.validated_data)
	        else:
	            return Response(ser.errors)

    4.FK+M2M
    	FK：
    	class UsSerializer(serializers.ModelSerializer):
		    depart_id = serializers.IntegerField()
		    v1 = serializers.CharField(source="depart.title", read_only=True)
		    
		    class Meta:
		        model = UserInfo
		        fields = ["name", "age", "gender", "depart_id", "tags", "v1"]

		    def validate_depart(self, value):
			    if value.id > 1:
			        return value
			    raise exceptions.ValidationError("部门错误")

		M2M：
		class UsSerializer(serializers.ModelSerializer):
		    mytag = serializers.ListField()

		    class Meta:
		        model = UserInfo
		        fields = ["name", "age", "gender", "depart_id", "mytag"]

		    def validate_mytag(self, value):
		        print(value)
		        queryset = Tag.objects.filter(id__in=value)
		        return queryset

		def post(self, request, *args, **kwargs):
	        # 1.获取原始数据
	        # print(request.data)

	        # 2.校验
	        ser = UsSerializer(data=request.data)
	        if ser.is_valid():
	            ser.validated_data.pop("mytag")
	            print(ser.validated_data)
	            ser.save()
	        else:
	            print(ser.errors)
	        return Response("成功")

    5.choices二合一
    	class UsSerializer(serializers.ModelSerializer):
		    gender_info = serializers.CharField(source="get_gender_display", read_only=True)
		    v1 = serializers.SerializerMethodField()
		    class Meta:
		        model = UserInfo
		        fields = ["id", "name", "age", "gender", "depart", "gender_info", "v1"]
		        extra_kwargs = {
		            "id": {"read_only": True},
		            "gender": {"write_only": True},
		        }

		    def get_v1(self, obj):
        		return {"id": obj.gender, "text": obj.get_gender_display()}

    6.FK二合一
    	class p1Serializer(serializers.ModelSerializer):
		    class Meta:
		        model = Depart
		        fields = "__all__"
    	class UsSerializer(serializers.ModelSerializer):
		    depart_id = serializers.IntegerField()
		    v1 = serializers.CharField(source="depart.title", read_only=True)
		    depart_info = p1Serializer(source="depart", read_only=True)
		    class Meta:
		        model = UserInfo
		        fields = ["name", "age", "gender", "depart_id", "v1", "depart_info"]
		        extra_kwargs = {
		            "id": {"read_only": True},
		            "depart": {"write_only": True},
        }
        def post(self, request, *args, **kwargs):
	        # 1.获取原始数据
	        # print(request.data)
	        # 2.校验
	        ser = UsSerializer(data=request.data)
	        if ser.is_valid():
	            ser.save()
	            return Response(ser.data)
	        else:
	            print(ser.errors)

    7.M2M二合一
    	class p2Serializer(serializers.ModelSerializer):
		    class Meta:
		        model = Tag
		        fields = "__all__"

		class UsSerializer(serializers.ModelSerializer):
		    tags_info = p2Serializer(many=True, source="tags", read_only=True)
		    class Meta:
		        model = UserInfo
		        fields = ["id", "name", "age", "gender", "tags", "tags_info"]
		        extra_kwargs = {
		            "id": {"read_only": True},
		            "tags": {"write_only": True},
		        }


