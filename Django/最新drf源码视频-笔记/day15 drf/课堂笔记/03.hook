
class NbModelSerializer(serializers.ModelSerializer):
    gender = serializers.CharField()

    class Meta:
        model = models.NbUserInfo
        fields = ["id", "name", "age", "gender"]
        extra_kwargs = {
            "id": {"read_only": True}
        }




class NbModelSerializer(serializers.ModelSerializer):
    gender = serializers.SerializerMethodField()                        # get_attribute         to_representation
    v1 = serializers.CharField(source="depart.title", read_only=True)   # get_attribute         to_representation

    class Meta:
        model = models.NbUserInfo
        fields = ["id", "name", "age", "gender"]
        extra_kwargs = {
            "id": {"read_only": True}
        }

    def get_gender(self, obj):
        return obj.get_gender_display()




==============================方法1================================
1.SerializerMethodField到底是如何实现的执行钩子方法？

2.序列化
	- 加载字段
	- 示例 ser=NbModelSerializer(...)
	- ser.data


class NbCharField(serializers.CharField):
    def __init__(self, method_name=None, **kwargs):
        self.method_name = method_name  # None

        super().__init__(**kwargs)

    def bind(self, field_name, parent):
        # The method name defaults to `get_{field_name}`.
        if self.method_name is None:
            self.method_name = 'xget_{field_name}'.format(field_name=field_name)  # "get_gender"

        super().bind(field_name, parent)

    def get_attribute(self, instance):
        method = getattr(self.parent, self.method_name)
        return method(instance)

    def to_representation(self, value):
        return str(value)


class NbModelSerializer(serializers.ModelSerializer):
    gender = NbCharField()

    class Meta:
        model = models.NbUserInfo
        fields = ["id", "name", "age", "gender"]
        extra_kwargs = {
            "id": {"read_only": True}
        }

    def xget_gender(self, obj):
        # print(obj)
        # print(obj.get_gender_display())
        # return obj.get_gender_display()
        # print(models.NbUserInfo.gender.choices)
        print(models.NbUserInfo.gender_choices)
        print(obj.gender)
        return obj.name


class NbView(APIView):
    def post(self, request, *args, **kwargs):

        obj = models.NbUserInfo.objects.first()
        print(obj.id, obj.get_gender_display(), obj.gender)

        ser = NbModelSerializer(data=request.data)
        if ser.is_valid():
            instance = ser.save()
            print(instance.id, instance.get_gender_display(), instance.gender)
            return Response(ser.data)
        else:
            return Response(ser.errors)


==============================方法2================================


from api.ext.hook import NbHookSerializer


class SbModelSerializer(NbHookSerializer, serializers.ModelSerializer):
    class Meta:
        model = models.NbUserInfo
        fields = ["id", "name", "age", "gender"]
        extra_kwargs = {
            "id": {"read_only": True}
        }

    def nb_gender(self, obj):
        return obj.get_gender_display()

    def nb_name(self, obj):
        return obj.get_gender_display()


class SbView(APIView):
    def post(self, request, *args, **kwargs):
        ser = SbModelSerializer(data=request.data)
        if ser.is_valid():
            ser.save()
            return Response(ser.data)
        else:
            return Response(ser.errors)



