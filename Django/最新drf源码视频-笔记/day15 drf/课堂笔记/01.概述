1.序列化器
	- 序列化
		- 序列化器的类
			def get_字段名():
				...
		- 路由 -> 视图  -> 去数据库获取对象或QuerySet  -> 序列化器的类转换成列表、字典、有序字典  -> JSON处理
		  ser = DepartSerializer(instance=对象)
	- 数据校验
		- 序列化器的类
		- 路由 -> 视图  -> request.data  -> 校验（序列化器的类） -> 操作（db，序列化器的类）

		  ser = DepartSerializer(data=request.data) 
		  ser.validated_data
		  models.Depart.objects.create(**ser.validated_data)

		  ser = DepartModelSerializer(data=request.data) 
		  ser.validated_data
		  ser.save()


		  1.自定义 Serializer + 字段
		  2.自定义 Serializer + 字段（内置+正则）
		  3.自定义 Serializer + 字段（内置+正则） + 字段钩子 + 全局钩子
		  4.自定义 ModelSerializer + extra_kwargs + save（多，pop；少，save参数）
		  5.自定义 ModelSerializer + FK  => 自动获取关联数据 depart      => depart_id
		  6.自定义 ModelSerializer + M2M => 自动获取关联数据 ListField或DictField  + 钩子
		  7.save的返回值
		  		instance = ser.save()
				instance.id
            	instance.name
            	instance.age
          8.序列化返回
          		- 校验Serializer + 序列化Serializer
          			class UusView(APIView):
					    def post(self, request, *args, **kwargs):
					        ser = UusModelSerializer(data=request.data)
					        if ser.is_valid():
					            instance = ser.save()
					            print(instance)
					            xx = UusModelSerializer(instance=instance)
					            return Response(xx.data)

					        else:
					            return Response(ser.errors)
          		- 校验Serializer
          		- 校验Serializer
          			- 校验，5个字段
          			- 序列化，3个字段
          			read_only=True，  只有在序列化的使用
          			write_only=True   只有在校验的使用


					class UusView(APIView):
					    def post(self, request, *args, **kwargs):
					        ser = UusModelSerializer(data=request.data)
					        if ser.is_valid():
					            ser.save()
					            return Response(ser.data)
					        else:
					            return Response(ser.errors)
	- 结合
		创建用户： {"user":"","password"}
			- 校验（序列化器的类）
			- 数据库对象 = 连接数据保存
			- 再讲新增的数据返回
				再次调用（序列化器的类），让他讲新增的数据 数据库对象 序列化。
				{"user":"","password"}
				{"id":1,"user":"","password"} + 默认生成的数据


	需求来了：编写一个序列化类，实现创建用户，
			提供： {"name":"x3","age":11,"gender":1} 
			返回： {"id":1, "name":"x3", "gender":"男",} 


			class NbUserInfo(models.Model):
			    name = models.CharField(verbose_name="姓名", max_length=32)
			    age = models.IntegerField(verbose_name="年龄")

			    gender = models.SmallIntegerField(verbose_name="性别", choices=((1, "男"), (2, "女")))

2.案例：博客系统
	关于评论：
		- 认证组件
		- 写在哪里

	单独视图：
		class CommentView(APIView):

		    def get(self, request, blog_id):
		        """ 评论列表，无序登录 """


		class CreateComment(APIView):
		    authentication_classes = ["..."]
		    def post(self):
		        pass

    评论列表 + 创建评论：

		class CommentView(APIView):

			authentication_classes = ["..."]        # None    request.user = None

		    def get(self, request, blog_id):
		        """ 评论列表，无序登录 """


		    def post(self,):
		    	""" 创建评论，必须登录 """


任务：
	分页
		- 博客列表
		- 评论列表
		
	视图：
		- APIView，10公共
		- ...    ，5
		- ..       5
		- class(..):20


		class UserView(ModelViewSet):
			..
			..